import { TESTER_PLUGIN_ID, TESTER_PLUGIN_REF } from "../../constant.js";

export function generateBootstrap(options: {
  port: number;
  startupDelay: number;
  waitForPlugin: string;
}) {
  return `//Code generated by the zotero-plugin-scaffold tester
var chromeHandle;

function install(data, reason) {}

async function startup({ id, version, resourceURI, rootURI }, reason) {
  await Zotero.initializationPromise;
  const aomStartup = Components.classes[
    "@mozilla.org/addons/addon-manager-startup;1"
  ].getService(Components.interfaces.amIAddonManagerStartup);
  const manifestURI = Services.io.newURI(rootURI + "manifest.json");
  chromeHandle = aomStartup.registerChrome(manifestURI, [
    ["content", "${TESTER_PLUGIN_REF}", rootURI + "content/"],
  ]);

  launchTests().catch((error) => {
    Zotero.debug(error);
    Zotero.HTTP.request(
      "POST",
      "http://localhost:${options.port}/update",
      {
        body: JSON.stringify({
          type: "fail",
          data: {
            title: "Internal: Plugin awaiting timeout",
            stack: "",
            str: "Plugin awaiting timeout",
          },
        }),
      }
    );
  });
}

function onMainWindowLoad({ window: win }) {}

function onMainWindowUnload({ window: win }) {}

function shutdown({ id, version, resourceURI, rootURI }, reason) {
  if (reason === APP_SHUTDOWN) {
    return;
  }

  if (chromeHandle) {
    chromeHandle.destruct();
    chromeHandle = null;
  }
}

function uninstall(data, reason) {}

async function launchTests() {
  // Delay to allow plugin to fully load before opening the test page
  await Zotero.Promise.delay(${options.startupDelay || 1000});

  const waitForPlugin = "${options.waitForPlugin}";

  if (waitForPlugin) {
    // Wait for a plugin to be installed
    await waitUtilAsync(() => {
      try {
        return !!eval(waitForPlugin)();
      } catch (error) {
        return false;
      }
    }).catch(() => {
      throw new Error("Plugin awaiting timeout");
    });
  }

  Services.ww.openWindow(
    null,
    "chrome://${TESTER_PLUGIN_REF}/content/index.xhtml",
    "Zotero Plugin Scaffold Test Runnner",
    "chrome,centerscreen,resizable=yes",
    {}
  );
}

function waitUtilAsync(condition, interval = 100, timeout = 1e4) {
  return new Promise((resolve, reject) => {
    const start = Date.now();
    const intervalId = setInterval(() => {
      if (condition()) {
        clearInterval(intervalId);
        resolve();
      } else if (Date.now() - start > timeout) {
        clearInterval(intervalId);
        reject();
      }
    }, interval);
  });
}
`;
}

export function generateManifest() {
  return {
    manifest_version: 2,
    name: "Zotero Plugin Scaffold Test Runner",
    version: "0.0.1",
    description: "Test suite for the Zotero plugin. This is a runtime-generated plugin only for testing purposes.",
    applications: {
      zotero: {
        id: TESTER_PLUGIN_ID,
        update_url: "https://example.com",
        // strict_min_version: "*.*.*",
        strict_max_version: "999.*.*",
      },
    },
  };
}
